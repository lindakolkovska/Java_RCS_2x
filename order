package jtm.activity09;

import java.util.Objects;
import java.util.Comparator;

/*- TODO #1
 * Implement Comparable interface with Order class
 * Hint! Use generic type of comparable items in form: Comparable<Order>
 * 
 * TODO #2 Override/implement necessary methods for Order class:
 * - public Order(String orderer, String itemName, Integer count) — constructor of the Order
 * - public int compareTo(Order order) — comparison implementation according to logic described below
 * - public boolean equals(Object object) — check equality of orders
 * - public int hashCode() — to be able to handle it in some hash... collection 
 * - public String toString() — string in following form: "ItemName: OrdererName: Count"
 * 
 * Hints:
 * 1. When comparing orders, compare their values in following order:
 *    - Item name
 *    - Customer name
 *    - Count of items
 * If item or customer is closer to start of alphabet, it is considered "smaller"
 * 
 * 2. When implementing .equals() method, rely on compareTo() method, as for sane design
 * .equals() == true, if compareTo() == 0 (and vice versa).
 * 
 * 3. Also Ensure that .hashCode() is the same, if .equals() == true for two orders.
 * 
 */

public class Order  implements Comparable<Order>{
	String customer; // Name of the customer
	String name; // Name of the requested item
	int count; // Count of the requested items
	
	 public Order(String orderer, String itemName, Integer count) {
		 this.name = itemName;
		 this.count = count;
		 this.customer = orderer;
	 }
	 
	 @Override
	 public int compareTo(Order order) {
		 
		 if(equals(order)) {
			 return 0;
		 }

		Integer countToInteger = new Integer(this.getCount());
		Integer countToInteger1 = new Integer(order.getCount());
		 
		int valIN = this.getName().compareTo(order.getName());
				this.getCustomer().compareTo(order.getCustomer());
				countToInteger.compareTo(countToInteger1);
		
		return valIN;
	 }
	 
	 @Override
		public int hashCode() {
		 //if .equals() == true for two orders
		 
			return Objects.hash(count, customer, name);
		}

		@Override
		public boolean equals(Object obj) {
			//When implementing .equals() method, rely on compareTo() method, as for sane design
			//* .equals() == true, if compareTo() == 0 (and vice versa).

			if (this == obj) {
				return true;
			}
			if (obj == null) {
				return false;
			}
			if (!(obj instanceof Order)) {
				return false;
			}
			Order other = (Order) obj;
		
			
			return count == other.count && Objects.equals(customer, other.customer) && Objects.equals(name, other.name);
		}

	
	 @Override
	 public String toString() {
		 //— string in following form: "ItemName: OrdererName: Count"
		 return String.format("Itemname: %s OrdererName: %s Count %s", name, customer, count);
	 }

	

	public String getCustomer() {
		return customer;
	}

	public void setCustomer(String customer) {
		this.customer = customer;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getCount() {
		return count;
	}

	public void setCount(int count) {
		this.count = count;
	}

	public static void main(String[] args)  {
			Orders orders = new Orders();
			Order order = new Order("a", "b", 1);
			Order order1 = new Order("c","d",2);
			Order order2 = new Order("a", "b", 3);
			Order order3 = new Order("a", "b", 3);
			orders.add(order);
			orders.add(order1);
			orders.add(order2);
			
			System.out.println(orders.getItemsList());
			System.out.println(orders.getItemsSet());
			//ItemN: Customer1: 3 - ItemN: Customer2: 1 Set of orders should be: - ItemN:
			
			
		}
	 
}
