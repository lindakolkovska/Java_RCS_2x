package jtm.activity10;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;

/*-
 * This is simple text stream editor. It reads text from file/standard input,
 * changes/deletes passed line and writes everything into file/standard output.
 * 
 * Parameters:
 * 
 * 1. number of line.
 *    If positive number, line is replaced/added into text,
 *    if negative, line is deleted from the text.
 * 2. Text to add/replace into specified line.
 *    If number is negative, enter dash (or whatever) as a padding
 *    for this parameter as it will be ignored.
 * 3. input file.
 *    If dash is specified, editor reads from standard input, otherwise it is file name.
 * 4. output file.
 *    If dash is specified, editor writes to standard input, otherwise it is file name.
 * HINTS:
 * 1. to pass parameters, you can run editor in terminal, for example, with following command:
 *   java -cp target/classes jtm.activity10.StreamEditor 2 aaaa - -
 * 2. to pass parameters for command in Eclipse, select:
 *   a) menu: Run — Run configurations...
 *   b) tree: Java applications — StreamEditor
 *   c) tab arguments, and field Program arguments, enter parameters there
 *   d) press Run
 */
public class StreamEditor {

	public static void main(String[] args) throws Exception {
		String inFileName, outFileName; // Names of input and output files
		int inLineNo = 0; // Line number, which needs to be changed, deleted
		String content; // String content which needs to be put in line
		PrintWriter writer = null; // Buffered writer of characters
		BufferedReader reader = null; // Buffered reader of characters
		File inFile; // File for file system operations
		int curLineNo = 0; // Counter of current/read line of input file
		String curLineContent; // Content of current line of input file
		boolean delete = false; // Should delete line?

		/*- TODO Check number of passed parameters. If they are null or number of
		 * them is not 4, write to standard error (System.err):
		 * Please use arguments: [-]lineNo (TextToAdd/Replace|-) (inputFile|-) (outputFile|-)
		 * and exit with System.exit(1); to pass error status of finished program.
		 */

		try {
			// input the file content to the StringBuffer "input" BufferedReader
			reader = new BufferedReader(new FileReader(args[2]));
			String line;
			StringBuffer inputBuffer = new StringBuffer();

			while ((line = reader.readLine()) != null) {
				inputBuffer.append(line);
				inputBuffer.append('\n');
			}

			String inputStr = inputBuffer.toString();
			System.out.println(inputStr);

			reader.close();

			System.out.println(inputStr);
			// check that it's inputted right

			//this if structure determines whether or not to replace "0" or "1" if
			if (Integer.parseInt(args[0]) == 0) {
				inputStr = inputStr.replace(args[1] + "1", args[1] + "0");
			} else if (Integer.parseInt(args[0]) == 1) {
				inputStr = inputStr.replace(args[1] + "0", args[1] + "1");
			}

			// check if the new input is right
			System.out.println("----------------------------------\n" + inputStr);

			// write the new String with the replaced line OVER the same file
			FileOutputStream fileOut = new FileOutputStream(args[3]);
			fileOut.write(inputStr.getBytes());
			fileOut.close();

		} catch (Exception e) {
			System.out.println("Problem reading file.");
		}

		/*- TODO Check number of passed parameters. If they are null or number of
		 * them is not 4, write to standard error (System.err):
		 * Please use arguments: [-]lineNo (TextToAdd/Replace|-) (inputFile|-) (outputFile|-)
		 * and exit with System.exit(1); to pass error status of finished program.
		 */

		if (args.length != 4) {
			System.err.println("Please use arguments: [-]lineNo (TextToAdd/Replace|-) (inputFile|-) (outputFile|-)");
			System.exit(1);
		}

		// TODO Get integer from the 1st argument. Note that line should be
		// deleted if number is negative.
		// Hint. Use Integer.parseInt() to parse String into integer

		inLineNo = Integer.parseInt(args[0]);
		LineNumberReader lineNumberReader = new LineNumberReader(new FileReader(args[2]));
		
		curLineContent = "";
		content = args[1];
		
		int data = lineNumberReader.read();
		int lineNumber = lineNumberReader.getLineNumber();

		while (data != -1) {
			if (inLineNo < 0) {
				lineNumber = inLineNo*-1;
				curLineContent = lineNumberReader.readLine();
				curLineContent.trim();

			} else {
				curLineContent = content;
			}
		}

		inFileName = args[2];

		if (args[2].equals("-")) {

			InputStreamReader r = new InputStreamReader(System.in);
			System.out.println("Enter the file path: ");
			reader = new BufferedReader(r);
			String path = reader.readLine();
			inFileName = path;

		}

		inFile = new File(inFileName);
		if (inFile.exists()) {
			reader = new BufferedReader(new FileReader(inFileName));
		} else {
			writer = new PrintWriter(inFileName);
		}

		// TODO Get integer from the 1st argument. Note that line should be
		// deleted if number is negative.
		// Hint. Use Integer.parseInt() to parse String into integer

		/*
		 * inLineNo = Integer.parseInt(args[0]); content = args[1];
		 * 
		 * while ((curLineContent = reader.readLine()) != null) { if (inLineNo < 0) {
		 * curLineContent.trim(); } else { curLineContent = content; } }
		 * 
		 * outFileName = args[3];
		 */

		/*- TODO Initialize new buffered character writer (PrintWriter) and:
		 *  1. If output file name (4th parameter) is "-", add writer to the standard output (System.out)
		 *  2. Otherwise initialize writer to the file of given name.
		 */

		/*if (args[3] == "-") {
			writer = new PrintWriter(System.out);
		} else {
			writer = new PrintWriter(args[3]);
		}

		String line;
		StringBuffer inputBuffer = new StringBuffer();

		while ((line = reader.readLine()) != null) {
			inputBuffer.append(line);
			inputBuffer.append('\n');
		}
		String inputStr = inputBuffer.toString();

		// reader.close();

		// this if structure determines whether or not to replace "0" or "1" if

		/*
		 * if ( == 0) { inputStr = inputStr.replace(replaceWith +"1", replaceWith +
		 * "0"); } } else if (Integer.parseInt(type) == 1) { inputStr =
		 * inputStr.replace(replaceWith + "0", replaceWith + "1"); }
		 * 
		 * // check if the new input is right
		 * System.out.println("----------------------------------\n" + inputStr);
		 * 
		 * // write the new String with the replaced line OVER the same file
		 * FileOutputStream fileOut = new FileOutputStream("notes.txt");
		 * fileOut.write(inputStr.getBytes()); fileOut.close();
		 * 
		 * // this if structure determines whether or not to replace "0" or "1"
		 * /*(Integer.parseInt(args[0]) == 0) { inputStr =
		 * inputStr.replace(curLineContent + "1", curLineContent + "0"); } else if
		 * (Integer.parseInt(args[0]) == 1) { inputStr = inputStr.replace(curLineContent
		 * + "0", content + "1"); }
		 * 
		 * // check if the new input is right
		 * System.out.println("----------------------------------\n" + inputStr);
		 * 
		 * // write the new String with the replaced line OVER the same file
		 * FileOutputStream fileOut = new FileOutputStream(args[3]);
		 * fileOut.write(inputStr.getBytes()); fileOut.close();
		 * 
		 * } catch (Exception e) { System.out.println("Problem reading file."); }
		 * 
		 * /* try { // input the file content to the StringBuffer "input" BufferedReader
		 * file = new BufferedReader(new FileReader("notes.txt")); String line;
		 * StringBuffer inputBuffer = new StringBuffer();
		 * 
		 * while ((line = file.readLine()) != null) { inputBuffer.append(line);
		 * inputBuffer.append('\n'); } String inputStr = inputBuffer.toString();
		 * 
		 * file.close();
		 * 
		 * System.out.println(inputStr); // check that it's inputted right
		 * 
		 * // this if structure determines whether or not to replace "0" or "1" if
		 * (Integer.parseInt(type) == 0) { inputStr = inputStr.replace(replaceWith +
		 * "1", replaceWith + "0"); } else if (Integer.parseInt(type) == 1) { inputStr =
		 * inputStr.replace(replaceWith + "0", replaceWith + "1"); }
		 * 
		 * // check if the new input is right
		 * System.out.println("----------------------------------\n" + inputStr);
		 * 
		 * // write the new String with the replaced line OVER the same file
		 * FileOutputStream fileOut = new FileOutputStream("notes.txt");
		 * fileOut.write(inputStr.getBytes()); fileOut.close();
		 * 
		 * } catch (Exception e) { System.out.println("Problem reading file."); }
		 */

		// TODO Get integer from the 1st argument. Note that line should be
		// deleted if number is negative.
		// Hint. Use Integer.parseInt() to parse String into integer

		// TODO set value of the string from 1st parameter into content

		/*- TODO Initialize new buffered character reader (BufferedReader) and:
		 * 1. If input file name (3rd parameter) is "-", add reader to the Standard input (System.in).
		 * 2. Otherwise check if file exists (if it doesn't, create it) and 
		 *    add reader to this file.
		 */

		/*- TODO Initialize new buffered character writer (PrintWriter) and:
		 *  1. If output file name (4th parameter) is "-", add writer to the standard output (System.out)
		 *  2. Otherwise initialize writer to the file of given name.
		 */

		// TODO Read lines in loop from passed file/standard input till to the
		// end. Count number of read lines. Before appending line into writer
		// check, if it needs to be changed/deleted. Change its value to passed
		// content or just skip appending it to the writer.
		// NOTE: append break at the end of written line only if it is NOT null
		// or empty string!

		// TODO If number of input line is larger than number of lines in file,
		// pad file with empty lines before necessary line.

		// TODO flush cache of the writer and close connections of the reader
		// and writer

	}
}
